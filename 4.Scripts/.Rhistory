EnhancedVolcano(desc.genelist.location ,
lab = rownames(desc.genelist.location),
x ="avg_log2FC",
y ="p_val",
colCustom = keyvals,
pointSize = 3.0,
labSize = 6.0,
colAlpha = 1)
EnhancedVolcano(desc.genelist.location ,
lab = rownames(desc.genelist.location),
x ="avg_log2FC",
y ="p_val",
colCustom = keyvals,
pointSize = 3.0,
labSize = 3.0,
colAlpha = 1)
# Install presto which performs a fast Wilcoxon rank sum test
library(devtools)
#install_github('immunogenomics/presto')
library(presto)
library(msigdbr)
library(fgsea)
#Run the wilcoxon test
seurat.genes <- wilcoxauc(seurat.obj, 'location')
#Remove the prefix in the gene symbol
seurat.genes$feature <- gsub(prefix, "", seurat.genes$feature)
#Check out the available species and collections in the database and choose the wanted species and category
msigdbr_show_species()
print(msigdbr_collections(), n=30)
m_df<- msigdbr(species = "Rattus norvegicus", category = "C5")
m_df <- subset(m_df, m_df$gs_subcat != "HPO")
tail(m_df)
# Create a gene set where genes are grouped per GO function
fgsea_sets<- m_df %>% split(x = .$gene_symbol, f = .$gs_name)
# select only the feature and auc columns for fgsea, which statistics to use is an open question
striatum.genes <- seurat.genes%>%
dplyr::filter(group == "Striatum") %>%
arrange(desc(logFC), desc(auc)) %>%
dplyr::select(feature, auc)
ranks.striatum <- deframe(striatum.genes)
head(ranks.striatum)
#Run GSEA
fgseaRes.striatum <- fgsea(fgsea_sets,
stats = ranks.striatum,
eps=0.0,
minSize = 10,
maxSize = length(ranks.striatum)-1)
#For STR
seurat.striatum.genes <- seurat.genes %>%
dplyr::filter(group == "Striatum") %>%
arrange(desc(auc)) %>%
dplyr::select(feature, logFC, padj)
keyvals <- ifelse(
seurat.striatum.genes$logFC < 0.0 & seurat.striatum.genes$logFC > -1.0, '#ba463f',
ifelse(seurat.striatum.genes$logFC > 0.0 & seurat.striatum.genes$logFC < 1.0, '#60aeb0',
ifelse(seurat.striatum.genes$logFC < -1.0, '#ff0f00',
ifelse(seurat.striatum.genes$logFC > 1.0, '#00d7e9',
ifelse(seurat.striatum.genes$padj < 1, "black",
"black")))))
keyvals[is.na(keyvals)] <- 'grey'
names(keyvals)[keyvals == '#00d7e9'] <- 'Striatum'
names(keyvals)[keyvals == '#60aeb0'] <- 'Striatum low'
names(keyvals)[keyvals == 'black'] <- 'test'
names(keyvals)[keyvals == '#ff0f00'] <- 'Substantia Nigra'
names(keyvals)[keyvals == '#ba463f'] <- 'Substantia Nigra low'
EnhancedVolcano(seurat.striatum.genes ,
seurat.striatum.genes$feature,
x ="logFC",
y ="padj",
selectLab = c('Slc1a2','Prex2', "Slc1a3", "Map2", "Agt", "Gfap", "Lama2", "Kcnc2"),
colCustom = keyvals,
pointSize = 3.0,
labSize = 6.0,
colAlpha = 1,
drawConnectors = TRUE,
widthConnectors = 0.75)
EnhancedVolcano(seurat.striatum.genes ,
seurat.striatum.genes$feature,
x ="logFC",
y ="padj",
selectLab = c('Slc1a2','Prex2', "Slc1a3", "Map2", "Agt", "Gfap", "Lama2", "Kcnc2"),
colCustom = keyvals,
pointSize = 3.0,
labSize = 10.0,
colAlpha = 1,
drawConnectors = TRUE,
widthConnectors = 0.75)
############################################################################################
## Load the necessary packages
source(".\\Directories&Packages.R")
source("snRNA_Functions.R")
# Colour Palettes
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette2 <- c("#0072B2", "#CC79A7", "#56B4E9", "#009E73", "#F0E442", "#E69F00",  "#D55E00")
cbPalette10 <- c("#E69F00", "#56B4E9", "#117733", "#F0E442", "#0072B2", "#D55E00", "#CC6677", "#AA4499", "#44AA99", "#999933")
cbPalette10A <- c("#56B4E9", "#F0E442", "#CC6677", "#AA4499", "#E69F00", "#D55E00", "#0072B2", "#117733", "#44AA99", "#999933")
microglia.palette = c("#cb4335", "#ec7063", "#FF5733", "#C70039", "#d35400", "#7b241c")
astrocyte.palette = c("Blue3", "deepskyblue3", "cadetblue3", "deepskyblue", "Blue")
oligo.palette = c("#72d693", "#117733", "green2")
opc.palette = c("#E69F00", "darkorange1", "coral2", "yellow3", "#CB910F")
obj.dir = "Microglia_SN&STR_Filtered&RemovedLowQualitySamples&HumanGenes_HARMONY_normalized&scaled_annotated_obj.rds" #The object to be loaded in the script
dataset = "Rat" #Name of the dataset to be loaded in the script (in this case: Human, Rat, Merged)
celltype = "Microglia"
org = "Rat"
celltype.colour = microglia.palette
prefix ="premRNARnor6--"
seurat.obj <- readRDS(file = paste0(seurat.dir, dataset, "_", celltype, "_subclusters_VarFeat_Scaled_HARMONY_15PCs_res005_obj.rds")) # Read the seurat object
seurat.obj <- readRDS(file = paste0(seurat.dir, dataset, "_", celltype, "_subclusters_VarFeat_Scaled_HARMONY_20PCs_res005_obj.rds")) # Read the seurat object
DimPlot(seurat.obj, cols = celltype.colour)
VlnPlot(annotated.seurat.obj, convert_markers(c("Hexb", "Cx3cr1", "Tgfbr1","F13a1", "Mrc1", "Cd163", "Ccl5", "Itga1", "Clnk", "Apoe", "Cd74", "Ebf1", "Lrrk2", "Tnfrsf1b", "Itga4"), prefix, org), pt.size = 0, cols = celltype.colour)
VlnPlot(seurat.obj, convert_markers(c("Hexb", "Cx3cr1", "Tgfbr1","F13a1", "Mrc1", "Cd163", "Ccl5", "Itga1", "Clnk", "Apoe", "Cd74", "Ebf1", "Lrrk2", "Tnfrsf1b", "Itga4"), prefix, org), pt.size = 0, cols = celltype.colour)
#homoestatic
VlnPlot(annotated.seurat.obj, convert_markers(c("Hexb", "Cx3cr1", "Sall1", "Dab2"), prefix, org), pt.size = 0, cols = celltype.colour)
#homoestatic
VlnPlot(seurat.obj, convert_markers(c("Hexb", "Cx3cr1", "Sall1", "Dab2"), prefix, org), pt.size = 0, cols = celltype.colour)
VlnPlot(annotated.seurat.obj, convert_markers(c("F13a1", "Mrc1", "Cd163", "Dab2"), prefix, org), pt.size = 0, cols = celltype.colour) #macrophages
VlnPlot(seurat.obj, convert_markers(c("F13a1", "Mrc1", "Cd163", "Dab2"), prefix, org), pt.size = 0, cols = celltype.colour) #macrophages
VlnPlot(seurat.obj, convert_markers(c("F13a1", "Mrc1", "Cd163", "Dab2", "Ccr1", "Mgl2"), prefix, org), pt.size = 0, cols = celltype.colour) #macrophages
VlnPlot(seurat.obj, convert_markers(c("F13a1", "Mrc1", "Cd163", "Dab2", "Ccr1", "Mlg2"), prefix, org), pt.size = 0, cols = celltype.colour) #macrophages
#combo homoestatic + macrophages
VlnPlot(seurat.obj, convert_markers(c("Hexb", "Sall1", "Cx3cr1","F13a1", "Mrc1", "Cd163"), prefix, org), pt.size = 0, cols = celltype.colour)
VlnPlot(annotated.seurat.obj, convert_markers(c("Ccl5", "Itga1", "Clnk", "Apoe", "Cd74", "Ebf1", "Lrrk2", "Tnfrsf1b", "Itga4"), prefix, org), pt.size = 0, cols = celltype.colour) #IC-4, 5, 6
#combo IC-4 - IC-6
VlnPlot(seurat.obj, convert_markers(c("Ccl5", "Itga1", "Clnk", "Apoe", "Cd74", "Ebf1", "Lrrk2", "Tnfrsf1b", "Itga4"), prefix, org), pt.size = 0, cols = celltype.colour) #IC-4, 5, 6
# Install presto which performs a fast Wilcoxon rank sum test
library(devtools)
#install_github('immunogenomics/presto')
library(presto)
library(msigdbr)
library(fgsea)
#Run the wilcoxon test
seurat.genes <- wilcoxauc(seurat.obj, 'location')
#Remove the prefix in the gene symbol
seurat.genes$feature <- gsub(prefix, "", seurat.genes$feature)
#Check out the available species and collections in the database and choose the wanted species and category
msigdbr_show_species()
print(msigdbr_collections(), n=30)
m_df<- msigdbr(species = "Rattus norvegicus", category = "C5")
m_df <- subset(m_df, m_df$gs_subcat != "HPO")
tail(m_df)
# Create a gene set where genes are grouped per GO function
fgsea_sets<- m_df %>% split(x = .$gene_symbol, f = .$gs_name)
# select only the feature and auc columns for fgsea, which statistics to use is an open question
nigra.genes <- seurat.genes %>%
dplyr::filter(group == "Nigra") %>%
arrange(desc(logFC), desc(auc)) %>%
dplyr::select(feature, auc)
ranks.nigra <- deframe(nigra.genes)
head(ranks.nigra)
#Run GSEA
fgseaRes.nigra <- fgsea(fgsea_sets,
stats = ranks.nigra,
eps=0.0,
minSize = 10,
maxSize = length(ranks.nigra)-1)
# Tidy up the data
fgseaResTidy.nigra <- fgseaRes.nigra %>%
as_tibble() %>%
arrange(desc(NES))
fgseaResTidy.nigra %>%
dplyr::select(-leadingEdge, -ES) %>%
arrange(padj) %>%
head()
# Get only the Biological Process GO terms
BP_fgseaResTidy.nigra <- fgseaResTidy.nigra[grep("GOBP_", fgseaResTidy.nigra$pathway),]
ggplot(BP_fgseaResTidy.nigra %>% dplyr::filter(padj < 0.05) %>% head(n= 10), aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj)) +
coord_flip() +
labs(x="GO term", y="Normalized Enrichment Score",
title="Nigra GO NES from GSEA") +
theme_minimal()
# select only the feature and auc columns for fgsea, which statistics to use is an open question
striatum.genes <- seurat.genes%>%
dplyr::filter(group == "Striatum") %>%
arrange(desc(logFC), desc(auc)) %>%
dplyr::select(feature, auc)
ranks.striatum <- deframe(striatum.genes)
head(ranks.striatum)
#Run GSEA
fgseaRes.striatum <- fgsea(fgsea_sets,
stats = ranks.striatum,
eps=0.0,
minSize = 10,
maxSize = length(ranks.striatum)-1)
# Tidy up the data
fgseaResTidy.striatum <- fgseaRes.striatum %>%
as_tibble() %>%
arrange(desc(NES))
fgseaResTidy.striatum %>%
dplyr::select(-leadingEdge, -ES) %>%
arrange(padj) %>%
head()
# Get only the Biological Process GO terms
BP_fgseaResTidy.striatum <- fgseaResTidy.striatum[grep("GOBP_", fgseaResTidy.striatum$pathway),]
ggplot(BP_fgseaResTidy.striatum %>% dplyr::filter(padj < 0.05) %>% head(n= 10), aes(reorder(pathway, NES), NES)) +
geom_col(aes(fill=padj)) +
coord_flip() +
labs(x="GO term", y="Normalized Enrichment Score",
title="Striatum GO NES from GSEA") +
theme_minimal()
#----------------------------------------------------------------------------------------------
## Define the neseccary directories, files and objects
source(".\\Directories&Packages.R")
source(".\\Silhouette scores.R")
## User defined variables
#obj.dir = "SubstantiaNigra&Striatum_RatCells_RemovedLowQualitySamples&HumanGenes_29112022.rds" #The object to be loaded in the script
obj.dir = "SubstantiaNigra&Striatum_RatCells_RemovedLowQualitySamples&HumanGenes_22122022.rds" #The object to be loaded in the script
dataset = "SN&STR_Filtered&RemovedLowQualitySamples&HumanGenes"
## Read the object
s.obj <- readRDS(file = paste0(seurat.dir, obj.dir))
table(s.obj$Age, s.obj$location)
obj.dir = "SN&STR_Filtered&RemovedLowQualitySamples&HumanGenes_HARMONY_normalized&scaled_annotated_obj.rds" #The object to be loaded in the script
dataset = "Rat_SN&STR_Filtered&RemovedLowQualitySamples&HumanGenes_HARMONY_normalized&scaled_annotated" #Name of the dataset to be loaded in the script (in this case: Human, Rat, Merged)
#--------------------------------------------------------------------------------------------
## Load the data
seurat.obj <- readRDS(file = paste0(seurat.dir, obj.dir))
tabel(seurat.obj$Age, seurat.obj$location)
table(seurat.obj$Age, seurat.obj$location)
ncell <- as.data.frame(table(seurat.obj$Age, seurat.obj$location))
View(ncell)
seurat.obj$Age
seurat.obj$location
length(seurat.obj$Age)
length(seurat.obj$location)
if (seurat.obj$Age != "3m" | seurat.obj$Age != "6m" | seurat.obj$Age != "9m" | seurat.obj$Age != "12m"){
print("wrong")
}
View(ncell)
print('wrong')
ncell <- as.data.frame(table(seurat.obj$orig.ident, seurat.obj$Age, seurat.obj$location))
View(ncell)
View(seurat.obj)
ncell <- as.data.frame(table(rownames(seurat.obj), seurat.obj$Age, seurat.obj$location))
print(seurat.obj$orig.ident)
#Create a table that consists of the species and the number of cells per species
CellsPerAge.table <- as.data.frame(table(seurat.obj$Age))
#calculate the percentage of cells in each species
CellsPerAge.table$percentage <- round(100*(CellsPerAge.table$Freq/sum(CellsPerAge.table$Freq)),2)
#Transform the name of the species in characters
CellsPerAge.table$Var1 <- as.character(CellsPerAge.table$Var1)
#Plot the stacked bar graph % cells per species
CellsPerAge.StackedBarPlot <- ggplot(CellsPerAge.table, aes(x = " ", y = Freq, fill = Var1)) +
theme_bw(base_size = 15) +
geom_col(position = "fill", width = 0.5) +
geom_text(aes(label = sprintf("%0.2f", percentage)), position = position_fill(vjust=0.5), size = 4) +
ggtitle("Number of Cells per Age (%)") +
xlab("Species") +
ylab("Proportion") +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, vjust = 1.5))
CellsPerAge.StackedBarPlot
View(CellsPerAge.table)
#Create a table that consists of the species and the number of cells per species
CellsPerBrainArea.table <- table(seurat.obj$location)
CellsPerBrainArea.table <- as.data.frame(CellsPerBrainArea.table)
#calculate the percentage of cells in each species
CellsPerBrainArea.table$percentage <- round(100*(CellsPerBrainArea.table$Freq/sum(CellsPerBrainArea.table$Freq)),2)
#Transform the name of the species in characters
CellsPerBrainArea.table$Var1 <- as.character(CellsPerBrainArea.table$Var1)
#Plot the stacked bar graph % cells per species
CellsPerBrainArea.StackedBarPlot <- ggplot(CellsPerBrainArea.table, aes(x = " ", y = Freq, fill = Var1)) +
theme_bw(base_size = 15) +
geom_col(position = "fill", width = 0.5) +
geom_text(aes(label = sprintf("%0.2f", percentage)), position = position_fill(vjust=0.5), size = 4) +
ggtitle("Number of Cells per Brain Area (%)") +
xlab("Species") +
ylab("Proportion") +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, vjust = 1.5))
#save the plot in a png image
png(filename=paste0(plot.dir, dataset, "_CellsPerBrainArea_StackedBarPlot.png"), width = 800, height = 700)
View(CellsPerBrainArea.table)
write.xlsx(seurat.obj$Age, file= paste0(plot.dir, "Test_Age.xlsx"))
View(CellsPerAge.table)
write.xlsx(seurat.obj$Age, file= paste0(plot.dir, "Test_Age.xlsx"))
seurat.obj$Age
#Create a table that consists of the species and the number of cells per species
CellsPerAge.table <- as.data.frame(table(seurat.obj$Age))
View(CellsPerAge.table)
seurat.obj$Age[1]
seurat.obj$Age[2]
length(rownames(seurat.obj))
length(seurat.obj$Age)
for (i in 1:length(seurat.obj$Age)){
if (is.na(seurat.obj$Age[i])){
print(seurat.obj$Age[i])
}
}
sn.str.obj <- readRDS(paste0(seurat.dir, "SubstantiaNigra&Striatum_RatCells.rds"))
ncell <- as.data.frame(table(sn.str.obj$Age, sn.str.obj$location))
View(ncell)
table(sn.str.obj$Age, sn.str.obj$location)
rownames(sn.str.obj)
nrow(seurat.obj)
colnames(sn.str.obj)
ncol(sn.str.obj)
setwd("/Users/Maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts")
## Set the working directory
rm(list = ls()) #Remove (possible preloaded) objects from the environment to avoid conflicts
setwd("/Users/Maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts")
#----------------------------------------------------------------------------------------------
## Define the neseccary directories, files and objects
source("Directories_Packages.R")
library(SeuratData)
library(SeuratDisk)
#----------------------------------------------------------------------------------------------
## Define the neseccary directories, files and objects
source("Directories_Packages.R")
library(SeuratData)
library(SeuratDisk)
## User defined variables
#obj.dir = "SubstantiaNigra&Striatum_RatCells_RemovedLowQualitySamples&HumanGenes_29112022.rds" #The object to be loaded in the script
obj.dir = "Rat_Astrocyte_subclusters_VarFeat_Scaled_HARMONY_15PCs_res005_obj.rds" #The object to be loaded in the script
## Read the object
s.obj <- readRDS(file = paste0(seurat.dir, obj.dir))
DimPlot(s.obj)
DimPlot(s.obj)
library(Seurat)
library(dplyr)
library(patchwork)
library(harmony)
library(rliger)
library(ggplot2)
library(stringr)
library(harmony)
library(openxlsx)
library(tidyverse)
## Read the object
s.obj <- readRDS(file = paste0(seurat.dir, obj.dir))
DimPlot(s.obj)
View(s.obj)
s.obj$Age
# step 1: factor to character, or else your factor will be number in adata
s.obj$orig.ident <- as.character(s.obj$orig.ident)
s.obj$location <- as.character(s.obj$location)
s.obj$Age <- as.character(s.obj$Age)
View(s.obj)
# step 2: Slim down a Seurat object. So you get raw counts, lognorm counts
s.obj.slim2 = DietSeurat(
s.obj,
counts = TRUE, # so, raw counts save to adata.layers['counts']
data = TRUE, # so, log1p counts save to adata.X when scale.data = False, else adata.layers['data']
scale.data = TRUE, # if only scaled highly variable gene, the export to h5ad would fail. set to false
features = s.obj@assays$RNA@var.features, # export just top highly variable genes
assays = "RNA",
dimreducs = c("pca","umap"),
graphs = c("RNA_nn", "RNA_snn"), # to RNA_nn -> distances, RNA_snn -> connectivities
misc = TRUE
)
# step 3: Save in h5ad format.
SaveH5Seurat(s.obj.slim2, filename = "DietSeurat_SaveH5Seurat_Rat_Astrocyte_HARMONY_normalizedscaled_annotated_obj.h5Seurat", overwrite = TRUE)
devtools::install_github('satijalab/seurat-data')
remotes::install_github("mojaveazure/seurat-disk")
library(SeuratData)
library(SeuratDisk)
# step 3: Save in h5ad format.
SaveH5Seurat(s.obj.slim2, filename = "DietSeurat_SaveH5Seurat_Rat_Astrocyte_HARMONY_normalizedscaled_annotated_obj.h5Seurat", overwrite = TRUE)
Convert("DietSeurat_SaveH5Seurat_Rat_Astrocyte_HARMONY_normalizedscaled_annotated_obj.h5Seurat", dest = "h5ad", overwrite = TRUE)
# step 0: Remove prefix and store celltype information as metadata (optional)
# Remove prefix
counts <- GetAssayData(s.obj, slot = "counts")
rownames(counts) <- gsub(species_prefix, "", rownames(counts))
# step 0: Remove prefix and store celltype information as metadata (optional)
# Remove prefix
species_prefix <- "premRNARnor6--"
rownames(counts) <- gsub(species_prefix, "", rownames(counts))
new.meta.data <- seurat.obj@meta.data
new.meta.data <- s.obj@meta.data
seurat.obj <- CreateSeuratObject(counts, meta.data = new.meta.data, assay = "RNA")
rownames(seurat.obj)
View(seurat.obj)
new.active.ident <- s.obj@active.ident
Idents(seurat.obj) <- new.active.ident
rownames(seurat.obj)
View(seurat.obj)
#Add the cluster names as metadata information
seurat.obj$celltype <- Idents(seurat.obj)
View(seurat.obj)
# step 1: factor to character, or else your factor will be number in adata
seurat.obj$orig.ident <- as.character(seurat.obj$orig.ident)
seurat.obj$location <- as.character(seurat.obj$location)
seurat.obj$Age <- as.character(seurat.obj$Age)
seurat.obj$celltype <- as.character(seurat.obj$celltype)
# step 2: Slim down a Seurat object. So you get raw counts, lognorm counts
s.obj.slim2 = DietSeurat(
seurat.obj,
counts = TRUE, # so, raw counts save to adata.layers['counts']
data = TRUE, # so, log1p counts save to adata.X when scale.data = False, else adata.layers['data']
scale.data = TRUE, # if only scaled highly variable gene, the export to h5ad would fail. set to false
features = seurat.obj@assays$RNA@var.features, # export just top highly variable genes
assays = "RNA",
dimreducs = c("pca","umap"),
graphs = c("RNA_nn", "RNA_snn"), # to RNA_nn -> distances, RNA_snn -> connectivities
misc = TRUE
)
View(seurat.obj)
counts <- GetAssayData(s.obj, slot = "counts", assay = "RNA")
rownames(counts) <- gsub(species_prefix, "", rownames(counts))
new.meta.data <- s.obj@meta.data
new.active.ident <- s.obj@active.ident
seurat.obj <- CreateSeuratObject(counts, meta.data = new.meta.data, assay = "RNA")
Idents(seurat.obj) <- new.active.ident
rownames(seurat.obj)
View(seurat.obj)
new.var.features <- s.obj@assays$RNA@var.features
seurat.obj@assays$RNA@var.features <- new.var.features
View(seurat.obj)
View(counts)
#Extract the needed information from the "old" seurat object
new.meta.data <- s.obj@meta.data
new.active.ident <- s.obj@active.ident
new.var.features <- s.obj@assays$RNA@var.features
# Extract the counts
counts <- GetAssayData(s.obj, slot = "counts", assay = "RNA")
# Remove the prefix from the counts and the variable features
rownames(counts) <- gsub(species_prefix, "", rownames(counts))
new.var.features <- gsub(species_prefix, "", new.var.features)
#Create the new seurat object and add the extracted information
seurat.obj <- CreateSeuratObject(counts, meta.data = new.meta.data, assay = "RNA")
Idents(seurat.obj) <- new.active.ident
seurat.obj@assays$RNA@var.features <- new.var.features
rownames(seurat.obj) #check that the prefix is removed
#Add the cluster names as metadata information
seurat.obj$celltype <- Idents(seurat.obj)
# step 1: factor to character, or else your factor will be number in adata
seurat.obj$orig.ident <- as.character(seurat.obj$orig.ident)
seurat.obj$location <- as.character(seurat.obj$location)
seurat.obj$Age <- as.character(seurat.obj$Age)
seurat.obj$celltype <- as.character(seurat.obj$celltype)
# step 2: Slim down a Seurat object. So you get raw counts, lognorm counts
s.obj.slim2 = DietSeurat(
seurat.obj,
counts = TRUE, # so, raw counts save to adata.layers['counts']
data = TRUE, # so, log1p counts save to adata.X when scale.data = False, else adata.layers['data']
scale.data = TRUE, # if only scaled highly variable gene, the export to h5ad would fail. set to false
features = seurat.obj@assays$RNA@var.features, # export just top highly variable genes
assays = "RNA",
dimreducs = c("pca","umap"),
graphs = c("RNA_nn", "RNA_snn"), # to RNA_nn -> distances, RNA_snn -> connectivities
misc = TRUE
)
# step 3: Save in h5ad format.
SaveH5Seurat(s.obj.slim2, filename = "../CellOracleAnalysis/DietSeurat_SaveH5Seurat_Rat_Astrocyte_HARMONY_normalizedscaled_annotated_obj.h5Seurat", overwrite = TRUE)
# step 3: Save in h5ad format.
SaveH5Seurat(s.obj.slim2, filename = "../CellOracleAnalysis/DietSeurat_SaveH5Seurat_Rat_Astrocyte_HARMONY_normalizedscaled_annotated_obj.h5Seurat", overwrite = TRUE)
Convert("../CellOracleAnalysis/DietSeurat_SaveH5Seurat_Rat_Astrocyte_HARMONY_normalizedscaled_annotated_obj.h5Seurat", dest = "h5ad", overwrite = TRUE)
print(f"the species are {species}")
species = "Rat" #Name of the dataset to be loaded in the script (in this case: Human, Rat, Merged)
celltype = "Oligodendrocyte"
print(f"the species are {species}")
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
species = "rat" #Name of the dataset to be loaded in the script (in this case: Human, Rat, Merged)
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
seurat.obj$location
levels(seurat.obj$location)
level(seurat.obj$location)
length(seurat.obj$location)
seurat.obj$location
View(seurat.obj)
as.factor(seurat.obj$location)
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
GSEA.plot.location
fgseaRes.location <- fgsea_analysis(seurat.object=seurat.obj, group_type = "location", group_name = area, species_name = species)
# Tidy up the data
fgseaResTidy.location <- fgseaRes.location %>%
as_tibble() %>%
arrange(desc(NES))
fgseaResTidy.location %>%
dplyr::select(-leadingEdge, -ES) %>%
arrange(padj) %>%
head()
View(fgseaRes.location)
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
as.character(cluster)
as.character(area)
area
group_type
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
source("C:/Users/maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts/GO_enrichment_analysis.R")
rm(list = ls()) #Remove (possible preloaded) objects from the environment to avoid conflicts
setwd("/Users/Maria/Dropbox (DNPL)/snRNA_Maria_Final/glial_snRNAseq_analysis/4.Scripts")
## Load the directories and necessary packages
source("Directories_Packages.R")
species = "rat" #rat or human (all lowercase!!)
s.obj1 <- readRDS(file=paste0(seurat.dir, "Rat_SN&STR_Filtered&RemovedLowQualitySamples&HumanGenes_normalized&scaled_obj.rds"))
dimplot.obj1 <- DimPlot(s.obj1, label = F)
dimplot.obj1.location <- DimPlot(s.obj1, group.by = "location", shuffle = T)
dimplot.obj1.age <- DimPlot(s.obj1, group.by = "Age", shuffle = T)
#Save the UMAP
png(filename=paste0(plot.dir, species, "/", norm.dir, dataset, "_UMAP.png"), width = 1000, height = 700)
#-------------------------------------------------------------------------------------
# User defined variables.
dataset = "SN&STR_" #The Seurat object will start with this phrase/word
species = "rat" #rat or human (all lowercase!!)
dimplot.obj1 <- DimPlot(s.obj1, label = F)
dimplot.obj1.location <- DimPlot(s.obj1, group.by = "location", shuffle = T)
dimplot.obj1.age <- DimPlot(s.obj1, group.by = "Age", shuffle = T)
#Save the UMAP
png(filename=paste0(plot.dir, species, "/", norm.dir, dataset, "_UMAP.png"), width = 1000, height = 700)
print(dimplot.obj1)
dev.off()
png(filename=paste0(plot.dir, species, "/", norm.dir, dataset, "_perBrainArea_UMAP.png"), width = 1000, height = 700)
print(dimplot.obj1.location)
dev.off()
png(filename=paste0(plot.dir, species, "/", norm.dir, dataset, "_perAge_UMAP.png"), width = 1000, height = 700)
print(dimplot.obj1.age)
dev.off()
sessioninfo()
sessionInfo()
View(s.obj1)
